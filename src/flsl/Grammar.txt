
(*
	The following is a simple EBNF Grammar for FLSL.
	It is NOT used directly by any part of the implementation
	instead this just serves as a concise reference.
*)

//============================ LEXER RULES ============================//

Letter   = 'A'..'Z' | 'a'..'z';
Digit    = '0'..'9';
HexDigit = Digit | 'A'..'F' | 'a'..'f';

Sign           = '+' | '-';
NumberExponent = ('e' | 'E') [Sign] Digit {Digit};
Integer        = Digit {Digit};

DecimalNumber  = Sign Integer ['.' Integer] [NumberExponent];

Number     = DecimalNumber;
IdPart     = Letter | '_' | '$';
Identifier = IdPart {IdPart Digit};

Comparison = '<' | '>' | '<=' | '>=' | '==' | '!=';

Literal = Number;

//============================ PARSER RULES ============================//

program = { declaration | shader };

block   = '{' {statement} '}';

shader = 'shader' Identifier block;

statement     = (declaration | assignment | function_call) ';';
declaration   = Identifier Identifier ':' Identifier
assignment    = [declaration | Identifier] '=' expression;
function_call = Identifier '(' [expression] {',' expression} ')';

expression         = add_expression
add_expression     = mul_expression {('+' | '-') mul_expression};
mul_expression     = unary_expression {('*' | '/') unary_expression};
unary_expression   = ['-'] atom_expression;
atom_expression    = Identifier | function_call | '(' expression ')' | Literal;


